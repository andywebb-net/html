#!/usr/bin/env php
<?php
require __DIR__ . '/vendor/autoload.php';
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

const kSpec          = 'https://html.spec.whatwg.org/multipage/indices.html';
const kJSONOutFile   = __DIR__ . '/elements.json';
const kPHPOutFile    = __DIR__ . '/functions/elements.php';
const kStrictOutFile = __DIR__ . '/functions/strict.php';
define('kReadmeStub', file_get_contents(__DIR__ . '/README.md.stub'));
const kReadmeFile       = __DIR__ . '/README.md';
const kGlobalAttributes = [
    'accesskey',
    'autocapitalize',
    'class',
    'contenteditable',
    'contextmenu',
    'dir',
    'draggable',
    'dropzone',
    'hidden',
    'id',
    'itemid',
    'itemprop',
    'itemref',
    'itemscope',
    'itemtype',
    'lang',
    'spellcheck',
    'style',
    'tabindex',
    'title',
    'translate',
];
class Bin
{
    static function update()
    {
        $html = file_get_contents(kSpec);
        if ($html === false) {
            die("Failed to fetch HTML content.");
        }
        $dom = new DOMDocument();
        libxml_use_internal_errors(true);
        $dom->loadHTML($html);
        libxml_clear_errors();
        $xpath          = new DOMXPath($dom);
        $elements       = [];
        $elements_query = $xpath->query('//table[caption[text()="List of elements"]]/tbody/tr');
        foreach ($elements_query as $element) {
            if (
                !($tag = $xpath->query('th/code/a', $element)->item(0)?->textContent)
                && !($tag = $xpath->query('th/a/code', $element)->item(0)?->textContent)
            ) {
                continue;
            }
            $attributes_node = $xpath->query('td[5]', $element)->item(0);
            $attributes      = [];
            if ($attributes_node) {
                foreach ($xpath->query('code/a', $attributes_node) as $attr) {
                    $attributes[] = $attr->textContent;
                }
            }
            $children    = $xpath->query('td[4]', $element)->item(0)->textContent;
            $selfClosing = strpos($children, 'empty') !== false && $tag !== 'template';
            $e           = [
                "tag" => $tag,
            ];
            if (!empty($attributes))
                $e["attributes"] = $attributes;
            if ($selfClosing)
                $e["selfClosing"] = true;

            $elements[] = $e;
            if ($tag === 'h1') {
                for ($i = 2; $i <= 6; $i++) {
                    $elements[] = [
                        "tag" => "h{$i}",
                    ];
                }
            }
        }
        file_put_contents(kJSONOutFile, json_encode($elements, JSON_PRETTY_PRINT));
        self::generate($elements);
    }
    static function camelArg(string $string): string
    {
        return "\$" . lcfirst(str_replace(' ', '', ucwords(str_replace('-', ' ', $string))));
    }

    static function generateElementCode(
        ?string $tag,
        array $attributes,
        bool $selfClosing,
        int $level = 1,
    ): string {
        $fname = $tag;
        if ($tag === 'var') {
            $fname = 'variable';
        }
        $params = "string ...\$attributes";
        $body   = "return selfClosingElement('{$tag}', ...\$attributes);";
        if (!$selfClosing) {
            $params = "string|array|RenderResult \$body, {$params}";
            $body   = "return element('{$tag}', \$body, ...\$attributes);";
        }
        [$params, $body] = self::indent($level, $params, $body);
        return "function {$fname}(\n{$params}\n): RenderResult {\n{$body}\n}";

    }
    static function generateStrictElementCode(
        ?string $tag,
        array $attributes,
        bool $selfClosing,
        int $level = 1,
    ): string {
        $fname = $tag;
        if ($tag === 'var') {
            $fname = 'variable';
        }
        $args = array_map(
            fn($attr) => "string " . self::camelArg($attr) . '= ""',
            $attributes,
        );
        if (!$selfClosing) {
            array_unshift($args, 'string|array|RenderResult $body');
        }

        $attributes_impl = join(
            ".\n",
            array_map(
                function ($attr) use ($level) {
                    $arg = self::camelArg($attr);
                    return self::indent(
                        $level,
                        "({$arg} !== '' ? \" {$attr}='\" . htmlspecialchars({$arg}, ENT_QUOTES) . \"'\" : '')",
                    );
                },
                $attributes,
            ),
        );

        $attributes_impl = $attributes_impl ? $attributes_impl . '.' : '';
        $params          = self::indent(
            $level,
            join(",\n", $args),
        );

        $body = self::indent(
            $level,
            "return RenderResult::encoded(\"<{$tag}\" . {$attributes_impl} " . ($selfClosing ? '"/>"' : "\">{\$body}</{$tag}>\"") . ");\n",
        );

        return "function {$fname}(\n{$params}\n): RenderResult {\n{$body}\n}";
    }

    static function lint(): void
    {
        passthru("php -l " . kPHPOutFile);
        passthru("php -l " . kStrictOutFile);

        passthru("php-cs-fixer fix --config .php-cs-fixer.php");
    }

    static function generate(array $elements): void
    {
        file_put_contents(kPHPOutFile, '');
        $file = fopen(kPHPOutFile, 'w');

        if ($file === false) {
            die("Failed to open PHP file for writing.");
        }

        fwrite($file, "<?php\n\nnamespace html;\n\n");
        foreach ($elements as $element) {
            $tag         = $element['tag'];
            $attributes  = array_merge($element['attributes'] ?? [], kGlobalAttributes);
            $selfClosing = $element['selfClosing'] ?? false;
            fwrite($file, self::generateElementCode($tag, $attributes, $selfClosing) . "\n\n");
        }

        fclose($file);

        self::generateStrict($elements);
        self::generateReadme($elements);
        self::lint();

    }
    static function generateStrict(array $elements): void
    {
        file_put_contents(kStrictOutFile, '');
        $file = fopen(kStrictOutFile, 'w');
        if ($file === false) {
            die("Failed to open strict PHP file for writing.");
        }


        fwrite($file, "<?php\n\nnamespace html\\strict;\n\nuse html\\RenderResult;\n\n");

        foreach ($elements as $element) {
            $tag         = $element['tag'];
            $attributes  = array_merge($element['attributes'] ?? [], kGlobalAttributes);
            $selfClosing = $element['selfClosing'] ?? false;
            fwrite($file, self::generateStrictElementCode($tag, $attributes, $selfClosing) . "\n\n");
        }

        fclose($file);

    }

    static function indent(int $level, string ...$strings): string|array
    {
        $o = [];
        foreach ($strings as $string) {
            $o[] = join(
                "\n",
                array_map(
                    fn($line) => str_repeat('    ', $level) . $line,
                    explode("\n", $string),
                ),
            );
        }
        return count($o) === 1 ? $o[0] : $o;

    }

    static function generateReadme(array $elements)
    {
        $readme = fopen(__DIR__ . '/README.md', 'w');
        if ($readme === false)
            die("Failed to open README file for writing.");

        $globalAttributes = join("\n", array_map(fn($attribute) => "| `{$attribute}` |", kGlobalAttributes));
        $noAtt            = array_filter($elements, fn($element) => count($element['attributes'] ?? []) === 0);
        $elements         = array_filter($elements, fn($element) => !empty ($element['attributes'] ?? []));
        $noAtt            = join("\n", array_map(fn($element) => "| `{$element['tag']}` |", $noAtt));
        $elements         = join("\n", array_map(fn($element) => "| `{$element['tag']}` | " . join(', ', $element['attributes']) . " |", $elements));

        $vars     = compact('globalAttributes', 'noAtt', 'elements');
        $contents = kReadmeStub;
        foreach ($vars as $key => $value) {
            $contents = str_replace("{\${$key}}", $value, $contents);
        }

        fwrite($readme, $contents);
        fclose($readme);
    }
}
(new SingleCommandApplication())
    ->setName('Generate HTML Elements')
    ->setVersion('1.0.0')
    ->addOption('update', 'u', InputOption::VALUE_NONE, 'Update the elements list from the HTML specification')
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        if ($input->getOption('update')) {
            Bin::update();
            $output->writeln('Elements list updated.');
        } else {
            Bin::generate(json_decode(file_get_contents(kJSONOutFile), true));
        }
        return 0;
    })
    ->run();